package com.qbay.qbayApps.ilpcsm.Fragments;import android.app.Activity;import android.content.Context;import android.os.Bundle;import android.os.Handler;import android.support.annotation.NonNull;import android.support.design.widget.CoordinatorLayout;import android.support.design.widget.Snackbar;import android.support.v4.app.Fragment;import android.support.v7.widget.CardView;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.ExpandableListView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.android.volley.AuthFailureError;import com.android.volley.DefaultRetryPolicy;import com.android.volley.NetworkError;import com.android.volley.NoConnectionError;import com.android.volley.ParseError;import com.android.volley.Request;import com.android.volley.Response;import com.android.volley.RetryPolicy;import com.android.volley.ServerError;import com.android.volley.TimeoutError;import com.android.volley.VolleyError;import com.android.volley.toolbox.JsonObjectRequest;import com.qbay.qbayApps.ilpcsm.R;import com.qbay.qbayApps.ilpcsm.Services.AppController;import com.qbay.qbayApps.ilpcsm.Services.ConnectivityReceiver;import com.qbay.qbayApps.ilpcsm.Services.Constant;import com.qbay.qbayApps.ilpcsm.Services.ExpandableListAdapter;import com.qbay.qbayApps.ilpcsm.WebServiceCall.VolleyCustomPostRequest;import com.victor.loading.book.BookLoading;import com.weiwangcn.betterspinner.library.BetterSpinner;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Objects;/** * Created by benchmark on 19/03/18. */public class SearchFragment extends Fragment implements View.OnClickListener {    Context mainContext;    LinearLayout mainLayout, searchButtonLayout, navigationLayout, navigationBtnLayout, recylerLoadingLayout, loadingInnerView;    RelativeLayout loadingLayoutView;    BookLoading loadingBook;    CoordinatorLayout snackBarLayout;    Button courseSearchBtn, collegeSearchBtn, searchBtnCourse, searchBtnCollege;    CardView courseSerachCardView, collegeSearchCardView;    BetterSpinner courseSpinner, spinner2, spinner3;    TextView titleTextView;    RecyclerViewClickListener recycleitemclicklistener;    String courseLevels[] = {"Any","Under Graduate","Diploma","Certificate"};    String courseLevelid[] = {"99","4","6","7"};    String positionvalue;    private MyAdapter mAdapter;    RecyclerView.LayoutManager mLayoutManager;    RecyclerView.LayoutManager mLayoutManager2;    RecyclerView.LayoutManager mLayoutManager3;    JSONArray stateList, districtList;    ArrayList<String> selecteddistList;    Boolean loadMoreChange, collectedListData;    int listCount;    //Course Methods    RecyclerView courseRecyclerView, courseCollegeRecyclerView;    JSONArray levelCourseList;    String selectedCourse;    String selectedProgramID;    int courseCollegeCount;    //College Methods    RecyclerView collegeRecyclerView;    JSONArray collegeList, mainCollegeList, collegeCourseList;    String selectedState, selectedDistrict;    Boolean loadMoreCollege;    int collegeListCount;    ExpandableListAdapter listAdapter;    ExpandableListView expListView;    @Override    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        mainLayout = (LinearLayout) inflater.inflate(R.layout.search_layout, container, false);        snackBarLayout = mainLayout.findViewById(R.id.Snackbar_layout);        searchButtonLayout = mainLayout.findViewById(R.id.Search_button_layout);        recylerLoadingLayout = mainLayout.findViewById(R.id.recycler_loading_view);        navigationLayout = mainLayout.findViewById(R.id.top_navigation_layout);        navigationBtnLayout = mainLayout.findViewById(R.id.navigation_btn_layout);        navigationBtnLayout.setOnClickListener(this);        titleTextView = mainLayout.findViewById(R.id.navigation_back_title);        loadingInnerView = mainLayout.findViewById(R.id.loading_inner_view);        loadingLayoutView = mainLayout.findViewById(R.id.loading_relative_layout);        loadingBook = mainLayout.findViewById(R.id.bookloading);        expListView = mainLayout.findViewById(R.id.lvExp2);        mainContext = getContext();        selectedCourse = "None";        selectedState = "None";        selectedDistrict = "None";        collectedListData = false;        selecteddistList = new ArrayList<>();        positionvalue = "course_main";        loadMoreCollege = false;        loadMoreChange = false;        courseSpinner = mainLayout.findViewById(R.id.spinner1);        spinner2 = mainLayout.findViewById(R.id.spinner2);        spinner3 = mainLayout.findViewById(R.id.spinner3);        courseRecyclerView = mainLayout.findViewById(R.id.course_search_recycler_view);        collegeRecyclerView = mainLayout.findViewById(R.id.college_search_recycler_view);        courseCollegeRecyclerView = mainLayout.findViewById(R.id.course_college_search_recycler_view);        mLayoutManager = new LinearLayoutManager(getActivity());        mLayoutManager2 = new LinearLayoutManager(getActivity());        mLayoutManager3 = new LinearLayoutManager(getActivity());        courseRecyclerView.setLayoutManager(mLayoutManager);        collegeRecyclerView.setLayoutManager(mLayoutManager2);        courseCollegeRecyclerView.setLayoutManager(mLayoutManager3);        String[] list2 = {"No Data Available"};        String[] list3 = {"No Data Available"};        spinner2.setText(getResources().getString(R.string.SearchPageSelectStateFirst));        ArrayAdapter<String> adapter = new ArrayAdapter<>(Objects.requireNonNull(getActivity()), android.R.layout.simple_dropdown_item_1line, android.R.id.text1, courseLevels);        ArrayAdapter<String> adapter2 = new ArrayAdapter<>(getActivity(), android.R.layout.simple_dropdown_item_1line, list2);        ArrayAdapter<String> adapter3 = new ArrayAdapter<>(getActivity(), android.R.layout.simple_dropdown_item_1line, list3);        courseSpinner.setAdapter(adapter);        spinner3.setAdapter(adapter2);        spinner2.setAdapter(adapter3);        spinner3.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                if (collectedListData) {                    try {                        selectedDistrict = "None";                        spinner2.setText(getResources().getString(R.string.SearchPageSelectDistrict));                        String stateCode = stateList.getJSONObject(position).getString("state_code");                        selectedState = stateCode;                        if (!selecteddistList.isEmpty()){                            selecteddistList.clear();                        }                        ArrayList<String> distlistarr = new ArrayList<>();                        for (int i = 0; i < districtList.length() - 1; i++) {                            if (stateCode.equals(districtList.getJSONObject(i).getString("st_code"))) {                                distlistarr.add(districtList.getJSONObject(i).getString("dist_name"));                                selecteddistList.add(districtList.getJSONObject(i).getString("distid"));                            }                        }                        ArrayAdapter<String> selectedadapter3 = new ArrayAdapter<>(getActivity(), android.R.layout.simple_dropdown_item_1line, distlistarr);                        spinner2.setAdapter(selectedadapter3);                        spinner2.setText(getResources().getString(R.string.SearchPageSelectDistrict));                    } catch (JSONException e) {                        e.printStackTrace();                    }                }else {                    spinner3.setText(getResources().getString(R.string.SearchPageSelectState));                }            }        });        spinner2.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                if (!"None".equals(selectedState)){                    selectedDistrict = selecteddistList.get(position);                }            }        });        courseSpinner.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                selectedCourse = courseLevelid[position];            }        });        courseSearchBtn = mainLayout.findViewById(R.id.course_search_btn);        collegeSearchBtn = mainLayout.findViewById(R.id.college_search_btn);        searchBtnCourse = mainLayout.findViewById(R.id.search_btn_course);        searchBtnCollege = mainLayout.findViewById(R.id.search_btn_college);        courseSerachCardView = mainLayout.findViewById(R.id.course_search_card_view);        collegeSearchCardView = mainLayout.findViewById(R.id.college_search_card_view);        courseSearchBtn.setOnClickListener(this);        collegeSearchBtn.setOnClickListener(this);        searchBtnCollege.setOnClickListener(this);        searchBtnCourse.setOnClickListener(this);        recycleitemclicklistener = new RecyclerViewClickListener() {            @Override            public void recyclerViewListClicked(View v, int position) {                try {                    if ("course_search_main".equals(positionvalue) || "course_main".equals(positionvalue)) {                        if (ConnectivityReceiver.isConnected()) {                            //  StartLoading();                            StartLoading();                            loadMoreChange = false;                            courseCollegeCount = 30;                            String courseSearchlisturl = Constant.SERVER+Constant.SEARCH_PAGE_COURSE_BASED_COLLEGE;                            Map<String, String> course_college_SearchParam = new HashMap<>();                            course_college_SearchParam.put("program_id", levelCourseList.getJSONObject(position).getString("Program_ID"));                            course_college_SearchParam.put("count", String.valueOf(courseCollegeCount));                            selectedProgramID = levelCourseList.getJSONObject(position).getString("Program_ID");                            getCollegeListPostMethod(course_college_SearchParam, courseSearchlisturl);                        }else {                            Toast.makeText(getActivity(),"No Internet Connection", Toast.LENGTH_SHORT).show();                        }                    }else if ("search_college_main".equals(positionvalue)|| "college_main".equals(positionvalue)){                        if (ConnectivityReceiver.isConnected()) {                            StartLoading();                            titleTextView.setText(getResources().getString(R.string.CoursesOffered));                            recylerLoadingLayout.setVisibility(View.GONE);                            navigationLayout.setVisibility(View.VISIBLE);                            searchButtonLayout.setVisibility(View.GONE);                            collegeSearchCardView.setVisibility(View.GONE);                            positionvalue = "search_college_course";                            collegeRecyclerView.setVisibility(View.GONE);                            expListView.setVisibility(View.VISIBLE);                            String collegecourselisturl = Constant.SERVER+Constant.COLLEGE_OFFERING_COURSES;                            Map<String, String> coursecollegeParams = new HashMap<>();                            coursecollegeParams.put("collegeid", mainCollegeList.getJSONObject(position).getString("College_ID"));                            getCourseDataPostMethod(coursecollegeParams, collegecourselisturl);                        }else {                            Toast.makeText(getActivity(),"No Internet Connection", Toast.LENGTH_SHORT).show();                        }                    }else if ("search_course_college".equals(positionvalue)){                        if (ConnectivityReceiver.isConnected()) {                             StartLoading();                             titleTextView.setText(getResources().getString(R.string.CoursesOffered));                             positionvalue = "search_course_college_course";                             courseCollegeRecyclerView.setVisibility(View.GONE);                             expListView.setVisibility(View.VISIBLE);                             String maincollegecourselisturl = Constant.SERVER+Constant.COLLEGE_OFFERING_COURSES;                             Map<String, String> maincoursecollegeParams = new HashMap<>();                              maincoursecollegeParams.put("collegeid", collegeList.getJSONObject(position).getString("College_ID"));                             getCourseDataPostMethod(maincoursecollegeParams, maincollegecourselisturl);                        }else {                            Toast.makeText(getActivity(),"No Internet Connection", Toast.LENGTH_SHORT).show();                        }                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }        };        return mainLayout;    }    @Override    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        //init();        CheckConnectionAndGetData();    }    @Override    public void onClick(View v) {        switch (v.getId()){            case R.id.course_search_btn:                if (ConnectivityReceiver.isConnected()){                    positionvalue = "course_main";                    collegeRecyclerView.setVisibility(View.GONE);                    courseRecyclerView.setVisibility(View.VISIBLE);                    snackBarLayout.setVisibility(View.GONE);                    courseSerachCardView.setVisibility(View.VISIBLE);                    collegeSearchCardView.setVisibility(View.GONE);                    courseSearchBtn.setBackgroundColor(getResources().getColor(R.color.WhiteColor));                    collegeSearchBtn.setBackgroundColor(getResources().getColor(R.color.SilverColor));                    courseSearchBtn.setTextColor(getResources().getColor(R.color.colorPrimary));                    collegeSearchBtn.setTextColor(getResources().getColor(R.color.WhiteColor));                }else {                    courseSerachCardView.setVisibility(View.GONE);                    collegeSearchCardView.setVisibility(View.GONE);                    snackBarLayout.setVisibility(View.VISIBLE);                    final Snackbar snackBar = Snackbar.make(snackBarLayout, "No Internet Connection", Snackbar.LENGTH_INDEFINITE);                    snackBar.setAction("Try Again", new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            // snackBar.dismiss();                        }                    });                    snackBar.show();                }                break;            case R.id.college_search_btn:                if (ConnectivityReceiver.isConnected()){                    positionvalue = "college_main";                    collegeRecyclerView.setVisibility(View.VISIBLE);                    courseRecyclerView.setVisibility(View.GONE);                    snackBarLayout.setVisibility(View.GONE);                    courseSerachCardView.setVisibility(View.GONE);                    collegeSearchCardView.setVisibility(View.VISIBLE);                    courseSearchBtn.setBackgroundColor(getResources().getColor(R.color.SilverColor));                    collegeSearchBtn.setBackgroundColor(getResources().getColor(R.color.WhiteColor));                    courseSearchBtn.setTextColor(getResources().getColor(R.color.WhiteColor));                    collegeSearchBtn.setTextColor(getResources().getColor(R.color.colorPrimary));                }else {                    courseSerachCardView.setVisibility(View.GONE);                    collegeSearchCardView.setVisibility(View.GONE);                    snackBarLayout.setVisibility(View.VISIBLE);                    final Snackbar snackBar = Snackbar.make(snackBarLayout, "No Internet Connection", Snackbar.LENGTH_INDEFINITE);                    snackBar.setAction("Try Again", new View.OnClickListener() {                        @Override                        public void onClick(View v) {                        }                    });                    snackBar.show();                }                break;            case R.id.search_btn_course:                if (ConnectivityReceiver.isConnected()){                    if ("None".equals(selectedCourse)){                        Toast.makeText(getActivity(),"Pleas Select Some Value", Toast.LENGTH_SHORT).show();                    }else {                        loadMoreChange = false;                        StartLoading();                        String courseSearchlisturl = Constant.SERVER+Constant.SEARCH_PAGE_COURSE_COLLEGE;                        Map<String, String> courseSearchParam = new HashMap<>();                        courseSearchParam.put("count", String.valueOf(listCount));                        courseSearchParam.put("levelid", selectedCourse);                        getCollegeAndCourseListPostMethod(courseSearchParam, courseSearchlisturl);                    }                }                break;            case R.id.search_btn_college:                if (ConnectivityReceiver.isConnected()){                    if ("None".equals(selectedState) && "None".equals(selectedDistrict)){                        Toast.makeText(getActivity(),"Pleas Select Some Value", Toast.LENGTH_SHORT).show();                    }else {                        if ("None".equals(selectedDistrict)){                            StartLoading();                            loadMoreCollege = false;                            collegeListCount = 30;                            String collegeSearchlisturl = Constant.SERVER+Constant.SEARCH_PAGE_COURSE_COLLEGE;                            Map<String, String> collegeSearchParam = new HashMap<>();                            collegeSearchParam.put("count", String.valueOf(collegeListCount));                            collegeSearchParam.put("stateid", selectedState);                            getCollegeListPostMethod(collegeSearchParam, collegeSearchlisturl);                        }else {                            StartLoading();                            loadMoreCollege = false;                            collegeListCount = 30;                            String collegeSearchlisturl = Constant.SERVER+Constant.SEARCH_PAGE_COURSE_COLLEGE;                            Map<String, String> collegeSearchParam = new HashMap<>();                            collegeSearchParam.put("count", String.valueOf(collegeListCount));                            collegeSearchParam.put("stateid", selectedState);                            collegeSearchParam.put("districtid", selectedDistrict);                            getCollegeListPostMethod(collegeSearchParam, collegeSearchlisturl);                        }                    }                }                break;            case R.id.navigation_btn_layout:                if ("search_course_college".equals(positionvalue)){                    if (ConnectivityReceiver.isConnected()){                        if ("None".equals(selectedCourse)){                            Toast.makeText(getActivity(),selectedCourse, Toast.LENGTH_SHORT).show();                        }else {                            recylerLoadingLayout.setVisibility(View.GONE);                            loadingLayoutView.setVisibility(View.GONE);                            loadingInnerView.setVisibility(View.GONE);                            navigationLayout.setVisibility(View.GONE);                            searchButtonLayout.setVisibility(View.VISIBLE);                            courseSerachCardView.setVisibility(View.VISIBLE);                            courseRecyclerView.setVisibility(View.VISIBLE);                            courseCollegeRecyclerView.setVisibility(View.GONE);                            positionvalue = "course_search_main";                        }                    }                }else if ("search_college_course".equals(positionvalue)){                    recylerLoadingLayout.setVisibility(View.GONE);                    collegeRecyclerView.setVisibility(View.VISIBLE);                    expListView.setVisibility(View.GONE);                    navigationLayout.setVisibility(View.GONE);                    collegeSearchCardView.setVisibility(View.VISIBLE);                    searchButtonLayout.setVisibility(View.VISIBLE);                    positionvalue="search_college_main";                }else if ("search_course_college_course".equals(positionvalue)){                    titleTextView.setText(getResources().getString(R.string.CollegeList));                    recylerLoadingLayout.setVisibility(View.GONE);                    positionvalue = "search_course_college";                    courseCollegeRecyclerView.setVisibility(View.VISIBLE);                    expListView.setVisibility(View.GONE);                }                break;        }    }    public void StartLoading(){        loadingLayoutView.setVisibility(View.VISIBLE);        loadingInnerView.setVisibility(View.VISIBLE);        loadingBook.start();    }    public void StopLoading(){        loadingLayoutView.setVisibility(View.GONE);        loadingInnerView.setVisibility(View.GONE);        if (loadingBook.isStart()){            loadingBook.stop();        }    }    public void CheckConnectionAndGetData(){        if (ConnectivityReceiver.isConnected()){            snackBarLayout.setVisibility(View.GONE);            searchButtonLayout.setVisibility(View.VISIBLE);            courseSerachCardView.setVisibility(View.VISIBLE);            collegeSearchCardView.setVisibility(View.GONE);            if (getActivity() != null) {                getStateAndDistrictList();            }        }else {            searchButtonLayout.setVisibility(View.GONE);            courseSerachCardView.setVisibility(View.GONE);            collegeSearchCardView.setVisibility(View.GONE);            snackBarLayout.setVisibility(View.VISIBLE);            final Snackbar snackBar = Snackbar.make(snackBarLayout, "No Internet Connection", Snackbar.LENGTH_INDEFINITE);            snackBar.setAction("Try Again", new View.OnClickListener() {                @Override                public void onClick(View v) {                    // snackBar.dismiss();                    if (getActivity() != null) {                        CheckConnectionAndGetData();                    }                }            });            snackBar.show();        }    }    //Career Methods    public void getStateAndDistrictList(){        int SocketTimeout = 30000;        RetryPolicy retry= new DefaultRetryPolicy(SocketTimeout,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT        );        JsonObjectRequest request = new JsonObjectRequest(Request.Method.GET, Constant.SERVER+Constant.STATE_AND_DISTRICT_LIST, null,                new Response.Listener<JSONObject>() {                    @Override                    public void onResponse(JSONObject response) {                        Log.e("Server Res", response.toString());                        try {                            stateList = response.getJSONArray("State_List");                            districtList = response.getJSONArray("District_List");                            ArrayList<String> statelistarr = new ArrayList<>();                            for (int i=0; i<stateList.length()-1;i++){                                statelistarr.add(stateList.getJSONObject(i).getString("state_name"));                            }                            Activity act = getActivity();                            if (act != null) {                                ArrayAdapter<String> adapter2 = new ArrayAdapter<>(act, android.R.layout.simple_dropdown_item_1line, statelistarr);                                spinner3.setAdapter(adapter2);                                collectedListData = true;                            }                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }//                    @Override//                    public void onResponse(JSONObject response) {////                        //callback.ReturnedResponseFromServer(response);////                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                        Log.e("Server err", error.toString());                        error.printStackTrace();                    }                }        );        request.setRetryPolicy(retry);        AppController.getInstance().addToRequestQueue(request,"json_req_method");    }    //Get Course based on level    public void getCourseDataPostMethod(Map<String, String> params, String url){        int SocketTimeout = 30000;        RetryPolicy retry= new DefaultRetryPolicy(SocketTimeout,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT        );        VolleyCustomPostRequest jsObjRequest = new VolleyCustomPostRequest(Request.Method.POST, url, params, new Response.Listener<JSONObject>() {            @Override            public void onResponse(JSONObject response) {                Log.e("Response", response.toString());                    try {                        if ("OK".equals(response.getString("Response"))) {                            if ("search_college_course".equals(positionvalue) || "search_course_college_course".equals(positionvalue)) {                                JSONArray maincourselist = new JSONArray();                                collegeCourseList = new JSONArray();                                List<String> listDataHeader1 = new ArrayList<>();                                HashMap<String, List<String>> listDataChild1 = new HashMap<>();                                JSONArray maincourseListTemp = response.getJSONArray("College_Inside_Courses");                                for (int i=0;i<maincourseListTemp.length();i++) {                                    for (String aCourseLevelid : courseLevelid) {                                        if (aCourseLevelid.equals(maincourseListTemp.getJSONObject(i).getString("course_level_id"))) {                                            maincourselist.put(maincourseListTemp.getJSONObject(i));                                        }                                    }                                }                                for (int i = 0; i < maincourselist.length() ; i++) {                                    if (listDataHeader1.isEmpty() || !listDataHeader1.contains(maincourselist.getJSONObject(i).getString("programme_name"))) {                                        listDataHeader1.add(maincourselist.getJSONObject(i).getString("programme_name"));                                        List<String> dchild = new ArrayList<>();                                        if ("".equals(maincourselist.getJSONObject(i).getString("Duration_Year"))) {                                            String totalval = maincourselist.getJSONObject(i).getString("Discipline") + "\n" + "Not Available" + "\n" + maincourselist.getJSONObject(i).getString("programme_name") + "\n" + maincourselist.getJSONObject(i).getString("course_level_id");                                            dchild.add(totalval);                                        } else {                                            String totalval = maincourselist.getJSONObject(i).getString("Discipline") + "\n" + maincourselist.getJSONObject(i).getString("Duration_Year") + "\n" + maincourselist.getJSONObject(i).getString("programme_name") + "\n" + maincourselist.getJSONObject(i).getString("course_level_id");                                            dchild.add(totalval);                                        }                                        listDataChild1.put(maincourselist.getJSONObject(i).getString("programme_name"), dchild);                                    } else {                                        List<String> d1child = listDataChild1.get(maincourselist.getJSONObject(i).getString("programme_name"));                                        // d1child.add(maincourselist.getJSONObject(i).getString("Discipline"));                                        if ("".equals(maincourselist.getJSONObject(i).getString("Duration_Year"))) {                                            String totalval = maincourselist.getJSONObject(i).getString("Discipline") + "\n" + "Not Available" + "\n" + maincourselist.getJSONObject(i).getString("programme_name") + "\n" + maincourselist.getJSONObject(i).getString("course_level_id");                                            d1child.add(totalval);                                        } else {                                            String totalval = maincourselist.getJSONObject(i).getString("Discipline") + "\n" + maincourselist.getJSONObject(i).getString("Duration_Year") + "\n" + maincourselist.getJSONObject(i).getString("programme_name") + "\n" + maincourselist.getJSONObject(i).getString("course_level_id");                                            d1child.add(totalval);                                        }                                        listDataChild1.put(maincourselist.getJSONObject(i).getString("programme_name"), d1child);                                    }                                }                                listAdapter = new ExpandableListAdapter(getActivity(), listDataHeader1, listDataChild1);                                // setting list adapter                                expListView.setAdapter(listAdapter);                                expListView.setVisibility(View.VISIBLE);                                navigationLayout.setVisibility(View.VISIBLE);                                searchButtonLayout.setVisibility(View.GONE);                                collegeSearchCardView.setVisibility(View.GONE);                                StopLoading();                            }                        }else if ("No data found".equals(response.getString("Response"))){                            StopLoading();                            recylerLoadingLayout.setVisibility(View.GONE);                            navigationLayout.setVisibility(View.GONE);                            searchButtonLayout.setVisibility(View.VISIBLE);                            collegeSearchCardView.setVisibility(View.VISIBLE);                            positionvalue = "search_college_main";                            collegeRecyclerView.setVisibility(View.VISIBLE);                            expListView.setVisibility(View.GONE);                            Toast.makeText(getActivity(),"Information on courses offered by college coming soon.", Toast.LENGTH_SHORT).show();                        }                    } catch (JSONException e) {                        e.printStackTrace();                    }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                Log.e("Error", error.toString());                if (error instanceof TimeoutError || error instanceof NoConnectionError) {                    recylerLoadingLayout.setVisibility(View.GONE);                    navigationLayout.setVisibility(View.GONE);                    searchButtonLayout.setVisibility(View.VISIBLE);                    collegeSearchCardView.setVisibility(View.VISIBLE);                    positionvalue = "search_college_main";                    collegeRecyclerView.setVisibility(View.VISIBLE);                    expListView.setVisibility(View.GONE);                    StopLoading();                    Toast.makeText(getActivity(),"Timeout error. please try again.", Toast.LENGTH_SHORT).show();                } else if (error instanceof AuthFailureError) {                    recylerLoadingLayout.setVisibility(View.GONE);                    navigationLayout.setVisibility(View.GONE);                    searchButtonLayout.setVisibility(View.VISIBLE);                    collegeSearchCardView.setVisibility(View.VISIBLE);                    positionvalue = "search_college_main";                    collegeRecyclerView.setVisibility(View.VISIBLE);                    expListView.setVisibility(View.GONE);                    StopLoading();                    Toast.makeText(getActivity(),"Authentication failure. please try again.", Toast.LENGTH_SHORT).show();                } else if (error instanceof ServerError) {                    recylerLoadingLayout.setVisibility(View.GONE);                    navigationLayout.setVisibility(View.GONE);                    searchButtonLayout.setVisibility(View.VISIBLE);                    collegeSearchCardView.setVisibility(View.VISIBLE);                    positionvalue = "search_college_main";                    collegeRecyclerView.setVisibility(View.VISIBLE);                    expListView.setVisibility(View.GONE);                    StopLoading();                    Toast.makeText(getActivity(),"Information on courses offered by college coming soon.", Toast.LENGTH_SHORT).show();                } else if (error instanceof NetworkError) {                    recylerLoadingLayout.setVisibility(View.GONE);                    navigationLayout.setVisibility(View.GONE);                    searchButtonLayout.setVisibility(View.VISIBLE);                    collegeSearchCardView.setVisibility(View.VISIBLE);                    positionvalue = "search_college_main";                    collegeRecyclerView.setVisibility(View.VISIBLE);                    expListView.setVisibility(View.GONE);                    StopLoading();                    Toast.makeText(getActivity(),"Network error. please try again.", Toast.LENGTH_SHORT).show();                } else if (error instanceof ParseError) {                    recylerLoadingLayout.setVisibility(View.GONE);                    navigationLayout.setVisibility(View.GONE);                    searchButtonLayout.setVisibility(View.VISIBLE);                    collegeSearchCardView.setVisibility(View.VISIBLE);                    positionvalue = "search_college_main";                    collegeRecyclerView.setVisibility(View.VISIBLE);                    expListView.setVisibility(View.GONE);                    StopLoading();                    Toast.makeText(getActivity(),"Parsing error. please try again.", Toast.LENGTH_SHORT).show();                }            }        });        jsObjRequest.setRetryPolicy(retry);        AppController.getInstance().addToRequestQueue(jsObjRequest, "tag_json_obj");    }    //College Methods    public void getCollegeAndCourseListPostMethod(Map<String, String> params, String url){        int SocketTimeout = 30000;        RetryPolicy retry= new DefaultRetryPolicy(SocketTimeout,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT        );        VolleyCustomPostRequest jsObjRequest = new VolleyCustomPostRequest(Request.Method.POST, url, params, new Response.Listener<JSONObject>() {            @Override            public void onResponse(JSONObject response) {                Log.e("Response", response.toString());                try {                    if ("course_main".equals(positionvalue) || "course_search_main".equals(positionvalue)) {                        OnLoadMoreListener loadMoreList = new OnLoadMoreListener() {                            @Override                            public void onLoadMore() {                                if ("course_search_main".equals(positionvalue)) {                                    recylerLoadingLayout.setVisibility(View.VISIBLE);                                    loadMoreChange = true;                                    Log.e("", "");                                    String collegelisturl1 = Constant.SERVER+Constant.SEARCH_PAGE_COURSE_COLLEGE;                                    listCount += 20;                                    Map<String, String> courseSearchParam = new HashMap<>();                                    courseSearchParam.put("count", String.valueOf(listCount));                                    courseSearchParam.put("levelid", selectedCourse);                                    getCollegeAndCourseListPostMethod(courseSearchParam, collegelisturl1);                                }                            }                        };                        if (loadMoreChange){                            if ("OK".equals(response.getString("Response"))) {                                final JSONArray newLoadedArray = response.getJSONArray("Filter_Course_Level_Based");                                //   collegeListArray.put(null);                                //   mAdapter.notifyItemInserted(collegeListArray.length() - 1);                                Handler handler = new Handler();                                handler.postDelayed(new Runnable() {                                    @Override                                    public void run() {                                        levelCourseList.remove(levelCourseList.length() - 1);                                        mAdapter.notifyItemRemoved(levelCourseList.length());                                        for (int i = 0; i < newLoadedArray.length() - 1; i++) {                                            // adapterData.add("Item" + (adapterData.size() + 1));                                            try {                                                levelCourseList.put(newLoadedArray.getJSONObject(i));                                            } catch (JSONException e) {                                                e.printStackTrace();                                            }                                        }                                       // levelCourseList = sortJsonArray(levelCourseList);                                        mAdapter.notifyItemInserted(levelCourseList.length());                                        mAdapter.setLoaded();                                        recylerLoadingLayout.setVisibility(View.GONE);                                        // MyAdapter ada= new MyAdapter(null,null,null,null,null,null,null);                                        // ada.s                                        //   mAdapter.setLoaded();                                    }                                }, 2000);                            }else if ("No data found".equals(response.getString("Response"))){                                recylerLoadingLayout.setVisibility(View.GONE);                                Toast.makeText(getActivity(),"No data found. please try again.", Toast.LENGTH_SHORT).show();                            }                        }else {                            if ("OK".equals(response.getString("Response"))) {                                loadMoreChange = false;                                //  Toast.makeText(getActivity(),selectedCourse, Toast.LENGTH_SHORT).show();                                listCount = 20;                                //filterButton.setVisibility(View.GONE);                                positionvalue = "course_search_main";                                levelCourseList = response.getJSONArray("Filter_Course_Level_Based");                               // levelCourseList = sortJsonArray(response.getJSONArray("Filter_Course_Level_Based"));                                mAdapter = new MyAdapter(mainContext, levelCourseList, positionvalue, recycleitemclicklistener, courseRecyclerView, loadMoreList, true);                                courseRecyclerView.setAdapter(mAdapter);                                StopLoading();                                //  StopLoading();                            }else if ("No data found".equals(response.getString("Response"))){                                StopLoading();                                Toast.makeText(getActivity(),"Information on courses offered by college coming soon.", Toast.LENGTH_SHORT).show();                            }                        }                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                Log.e("Error", error.toString());                if (error instanceof TimeoutError || error instanceof NoConnectionError) {                    StopLoading();                    Toast.makeText(getActivity(),"Timeout error. please try again.", Toast.LENGTH_SHORT).show();                } else if (error instanceof AuthFailureError) {                    StopLoading();                    Toast.makeText(getActivity(),"Authentication failure. please try again.", Toast.LENGTH_SHORT).show();                } else if (error instanceof ServerError) {                    StopLoading();                    Toast.makeText(getActivity(),"Information on courses offered by college coming soon.", Toast.LENGTH_SHORT).show();                } else if (error instanceof NetworkError) {                    StopLoading();                    Toast.makeText(getActivity(),"Network error. please try again.", Toast.LENGTH_SHORT).show();                } else if (error instanceof ParseError) {                    StopLoading();                    Toast.makeText(getActivity(),"Parsing error. please try again.", Toast.LENGTH_SHORT).show();                }            }        });        jsObjRequest.setRetryPolicy(retry);        AppController.getInstance().addToRequestQueue(jsObjRequest, "tag_json_obj");    }    //College Methods    public void getCollegeListPostMethod(Map<String, String> params, String url){        int SocketTimeout = 30000;        RetryPolicy retry= new DefaultRetryPolicy(SocketTimeout,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT        );        VolleyCustomPostRequest jsObjRequest = new VolleyCustomPostRequest(Request.Method.POST, url, params, new Response.Listener<JSONObject>() {            @Override            public void onResponse(JSONObject response) {                Log.e("Response", response.toString());                try {                    if ("course_search_main".equals(positionvalue) || "search_course_college".equals(positionvalue)){                        OnLoadMoreListener loadMoreList1 = new OnLoadMoreListener() {                            @Override                            public void onLoadMore() {                                if ("search_course_college".equals(positionvalue)) {                                    recylerLoadingLayout.setVisibility(View.VISIBLE);                                    loadMoreChange = true;                                    Log.e("", "");                                    courseCollegeCount += 30;                                    String courseSearchlisturl = Constant.SERVER+Constant.SEARCH_PAGE_COURSE_BASED_COLLEGE;                                    Map<String, String> course_college_SearchParam = new HashMap<>();                                    course_college_SearchParam.put("program_id", selectedProgramID);                                    course_college_SearchParam.put("count", String.valueOf(courseCollegeCount));                                  //  getCollegeAndCourseListPostMethod(course_college_SearchParam, courseSearchlisturl);                                    getCollegeListPostMethod(course_college_SearchParam, courseSearchlisturl);                                }                            }                        };                        if (loadMoreChange){                            if ("OK".equals(response.getString("Response"))) {                                final JSONArray newLoadedArray = response.getJSONArray("Courses_Based_College");                                // collegeListArray.put(null);                                //  mAdapter.notifyItemInserted(collegeListArray.length() - 1);                                Handler handler = new Handler();                                handler.postDelayed(new Runnable() {                                    @Override                                    public void run() {                                        collegeList.remove(collegeList.length() - 1);                                        mAdapter.notifyItemRemoved(collegeList.length());                                        for (int i = 0; i < newLoadedArray.length() - 1; i++) {                                            // adapterData.add("Item" + (adapterData.size() + 1));                                            try {                                                collegeList.put(newLoadedArray.getJSONObject(i));                                            } catch (JSONException e) {                                                e.printStackTrace();                                            }                                        }                                        mAdapter.notifyItemInserted(collegeList.length());                                        mAdapter.setLoaded();                                        recylerLoadingLayout.setVisibility(View.GONE);                                        // MyAdapter ada= new MyAdapter(null,null,null,null,null,null,null);                                        // ada.s                                        //   mAdapter.setLoaded();                                    }                                }, 2000);                            }else if ("No data found".equals(response.getString("Response"))){                                recylerLoadingLayout.setVisibility(View.GONE);                                Toast.makeText(getActivity(),"Information on courses offered by college coming soon.", Toast.LENGTH_SHORT).show();                            }                        }else {                            if ("OK".equals(response.getString("Response"))) {                                titleTextView.setText(getResources().getString(R.string.CollegeList));                                courseRecyclerView.setVisibility(View.GONE);                                courseCollegeRecyclerView.setVisibility(View.VISIBLE);                                recylerLoadingLayout.setVisibility(View.GONE);                                positionvalue = "search_course_college";                                navigationLayout.setVisibility(View.VISIBLE);                                searchButtonLayout.setVisibility(View.GONE);                                courseSerachCardView.setVisibility(View.GONE);                                collegeList = response.getJSONArray("Courses_Based_College");                                mAdapter = new MyAdapter(mainContext, collegeList, positionvalue, recycleitemclicklistener, courseCollegeRecyclerView, loadMoreList1, true);                                courseCollegeRecyclerView.setAdapter(mAdapter);                                StopLoading();                                //  StopLoading();                            }else if ("No data found".equals(response.getString("Response"))){                                StopLoading();                                Toast.makeText(getActivity(),"Information on courses offered by college coming soon.", Toast.LENGTH_SHORT).show();                            }                            //   StopLoading();                        }                    }else if ("search_college_main".equals(positionvalue) || "college_main".equals(positionvalue)){                        OnLoadMoreListener loadMoreList1 = new OnLoadMoreListener() {                            @Override                            public void onLoadMore() {                                if ("search_college_main".equals(positionvalue)) {                                    recylerLoadingLayout.setVisibility(View.VISIBLE);                                    loadMoreCollege = true;                                    Log.e("", "");                                    collegeListCount += 20;                                    String collegeSearchlisturl3 = Constant.SERVER+Constant.SEARCH_PAGE_COURSE_COLLEGE;                                    Map<String, String> collegeSearchParam = new HashMap<>();                                    collegeSearchParam.put("count", String.valueOf(collegeListCount));                                    collegeSearchParam.put("stateid", selectedState);                                    collegeSearchParam.put("districtid", selectedDistrict);                                 //   getCollegeAndCourseListPostMethod(collegeSearchParam, collegeSearchlisturl3);                                    getCollegeListPostMethod(collegeSearchParam, collegeSearchlisturl3);                                }                            }                        };                        if (loadMoreCollege){                            if ("OK".equals(response.getString("Response"))) {                                final JSONArray newLoadedArray = response.getJSONArray("Courses_Based_College");                                // collegeListArray.put(null);                                //  mAdapter.notifyItemInserted(collegeListArray.length() - 1);                                Handler handler = new Handler();                                handler.postDelayed(new Runnable() {                                    @Override                                    public void run() {                                        mainCollegeList.remove(mainCollegeList.length() - 1);                                        mAdapter.notifyItemRemoved(mainCollegeList.length());                                        for (int i = 0; i < newLoadedArray.length() - 1; i++) {                                            // adapterData.add("Item" + (adapterData.size() + 1));                                            try {                                                mainCollegeList.put(newLoadedArray.getJSONObject(i));                                            } catch (JSONException e) {                                                e.printStackTrace();                                            }                                        }                                        mAdapter.notifyItemInserted(mainCollegeList.length());                                        mAdapter.setLoaded();                                        recylerLoadingLayout.setVisibility(View.GONE);                                        // MyAdapter ada= new MyAdapter(null,null,null,null,null,null,null);                                        // ada.s                                        //   mAdapter.setLoaded();                                    }                                }, 2000);                            }else if ("No data found".equals(response.getString("Response"))){                                recylerLoadingLayout.setVisibility(View.GONE);                                Toast.makeText(getActivity(),"Information on courses offered by college coming soon", Toast.LENGTH_SHORT).show();                            }                        }else {                            if ("OK".equals(response.getString("Response"))) {                                positionvalue = "search_college_main";                                mainCollegeList = response.getJSONArray("Filter_Colleges_State_District_Based");                                mAdapter = new MyAdapter(mainContext, mainCollegeList, positionvalue, recycleitemclicklistener, collegeRecyclerView, loadMoreList1, false);                                collegeRecyclerView.setAdapter(mAdapter);                                StopLoading();                                //   StopLoading();                            }else if ("No data found".equals(response.getString("Response"))){                                StopLoading();                                Toast.makeText(getActivity(),"Information on courses offered by college coming soon", Toast.LENGTH_SHORT).show();                            }                        }                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                Log.e("Error", error.toString());                if (error instanceof TimeoutError || error instanceof NoConnectionError) {                    StopLoading();                    Toast.makeText(getActivity(),"Timeout error. please try again.", Toast.LENGTH_SHORT).show();                } else if (error instanceof AuthFailureError) {                    StopLoading();                    Toast.makeText(getActivity(),"Authentication failure. please try again.", Toast.LENGTH_SHORT).show();                } else if (error instanceof ServerError) {                    StopLoading();                    Toast.makeText(getActivity(),"Information on courses offered by college coming soon.", Toast.LENGTH_SHORT).show();                } else if (error instanceof NetworkError) {                    StopLoading();                    Toast.makeText(getActivity(),"Network error. please try again.", Toast.LENGTH_SHORT).show();                } else if (error instanceof ParseError) {                    StopLoading();                    Toast.makeText(getActivity(),"Parsing error. please try again.", Toast.LENGTH_SHORT).show();                }            }        });        jsObjRequest.setRetryPolicy(retry);        AppController.getInstance().addToRequestQueue(jsObjRequest, "tag_json_obj");    }    //RecyclerView Adapter Class    public class MyAdapter extends RecyclerView.Adapter<MyAdapter.ViewHolder> {        JSONArray mCareerData;        String positionstr;        Context context;        RecyclerViewClickListener itemclicklistener;        OnLoadMoreListener mOnLoadMoreListener;        RecyclerView recycleview;        private final int VIEW_TYPE_ITEM = 0;        private final int VIEW_TYPE_LOADING = 1;        private int visibleThreshold = 5;        private int lastVisibleItem, totalItemCount;        private boolean loading;        @Override        public int getItemViewType(int position) {            int vType = 0;            try {                vType =  mCareerData.get(position) == null ? VIEW_TYPE_LOADING : VIEW_TYPE_ITEM;            } catch (JSONException e) {                e.printStackTrace();            }            return   vType;        }        // Provide a reference to the views for each data item        // Complex data items may need more than one view per item, and        // you provide access to all the views for a data item in a view holder        public class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener{            // each data item is just a string in this case            //Career Views            TextView careerTitle;            //Course Views            TextView courseLevelTxtView, courseNameTxtView, programNameTxtView, durationTxtView;            //College Views            TextView collegeNameTxtView, CollegeAddressTxtView, CollegePinCodeTxtView, CollegeAffilitaedTxtView, CollegeWebSiteTxtView;            Button offeringButton;            ViewHolder(View v) {                super(v);                if ("course_search_main".equals(positionstr)){                    //mTextView = v;                    courseLevelTxtView = v.findViewById(R.id.course_level_txt_view);                    courseNameTxtView = v.findViewById(R.id.course_name_txt_view);                    programNameTxtView = v.findViewById(R.id.program_name_txt_view);                    durationTxtView = v.findViewById(R.id.program_duration_txt_view);                    offeringButton = v.findViewById(R.id.offering_college_button);                    offeringButton.setOnClickListener(this);                    //careerimg = v.findViewById(R.id.career_img_view);                    //v.setOnClickListener(this);                }else if ("search_course_college".equals(positionstr) || "course_college".equals(positionstr) || "search_college_main".equals(positionstr)){                    collegeNameTxtView = v.findViewById(R.id.college_name_txt_view);                    CollegeAddressTxtView = v.findViewById(R.id.address_text_view);                    CollegePinCodeTxtView = v.findViewById(R.id.pincode_text_view);                    CollegeAffilitaedTxtView = v.findViewById(R.id.affiliated_text_view);                    CollegeWebSiteTxtView = v.findViewById(R.id.website_txt_view);                    v.setOnClickListener(this);                }else {                    careerTitle = v.findViewById(R.id.career_title);                    v.setOnClickListener(this);                }            }            @Override            public void onClick(View v) {                itemclicklistener.recyclerViewListClicked(v, this.getLayoutPosition());            }        }        // Provide a suitable constructor (depends on the kind of dataset)        MyAdapter(Context inputcontext, JSONArray careerdata, String position, RecyclerViewClickListener inputrecyclerViewClickListener, RecyclerView recyclerView, OnLoadMoreListener inputloadmorelistener, Boolean loadMore) {            mCareerData = careerdata;            positionstr = position;            itemclicklistener = inputrecyclerViewClickListener;            context = inputcontext;            if (loadMore){                recycleview = recyclerView;                mOnLoadMoreListener = inputloadmorelistener;                final LinearLayoutManager linearLayoutManager = (LinearLayoutManager) recyclerView                        .getLayoutManager();                recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {                    @Override                    public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                        super.onScrollStateChanged(recyclerView, newState);                        totalItemCount = linearLayoutManager.getItemCount();                        lastVisibleItem = linearLayoutManager.findLastVisibleItemPosition();                        if (!loading && totalItemCount <= (lastVisibleItem + visibleThreshold)) {                            // End has been reached                            // Do something                            if (mOnLoadMoreListener != null) {                                mOnLoadMoreListener.onLoadMore();                            }                            loading = true;                        }                    }                    @Override                    public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                        super.onScrolled(recyclerView, dx, dy);                    }                });            }        }        // Create new views (invoked by the layout manager)        @Override        public MyAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {            View v;            // create a new view            if ("course_search_main".equals(positionstr)){//                 v= LayoutInflater.from(parent.getContext())//                        .inflate(R.layout.coure_program_recycler_view, parent, false);                v= LayoutInflater.from(parent.getContext())                        .inflate(R.layout.course_list_layout, parent, false);            }else if ("search_course_college".equals(positionstr) || "course_college".equals(positionstr) || "search_college_main".equals(positionstr)){//                if (viewType == VIEW_TYPE_LOADING){//                    v = LayoutInflater.from(parent.getContext())//                            .inflate(R.layout.recycler_item_load_layout, parent, false);//                }else {                v = LayoutInflater.from(parent.getContext())                        .inflate(R.layout.college_recycler_view, parent, false);                //  }            }else if ("course_prog_list".equals(positionstr)){                v = LayoutInflater.from(parent.getContext())                        .inflate(R.layout.course_list_layout, parent, false);            } else {                v = LayoutInflater.from(parent.getContext())                        .inflate(R.layout.career_recyclerview, parent, false);            }            return new ViewHolder(v);        }        @Override        public void onBindViewHolder(MyAdapter.ViewHolder holder, int position) {            // - get element from your dataset at this position            // - replace the contents of the view with that element            // holder.mTextView.setText(mDataset[position]);            try {                if ("career_main".equals(positionstr)) {                    JSONObject newobj = mCareerData.getJSONObject(position);                    holder.careerTitle.setText(newobj.getString("NAME"));                }else if ("career_info".equals(positionstr)){                    JSONObject newobj = mCareerData.getJSONObject(position);                    holder.careerTitle.setText(newobj.getString("SUB_NAME"));                }else if ("course_main".equals(positionstr)){                    JSONObject newobj = mCareerData.getJSONObject(position);                    holder.careerTitle.setText(newobj.getString("discipline_group_category"));                }else if ("course_group".equals(positionstr)){                    JSONObject newobj = mCareerData.getJSONObject(position);                    holder.careerTitle.setText(newobj.getString("discipline_group"));                }else if ("course_search_main".equals(positionstr)){                    JSONObject newobj = mCareerData.getJSONObject(position);                    String courselevelstr="Not Available";                    for (int j = 0; j < courseLevelid.length; j++) {                        if (courseLevelid[j].equals(newobj.getString("Level_ID"))) {                            courselevelstr = courseLevels[j];                        }                    }                    holder.courseLevelTxtView.setText(getResources().getString(R.string.CourseListCourseLevel, courselevelstr));                    holder.courseNameTxtView.setText(newobj.getString("Discipline"));                    holder.programNameTxtView.setText(getResources().getString(R.string.CourseListProgram, newobj.getString("programme_name")));                    holder.durationTxtView.setText(getResources().getString(R.string.CourseListDuration, newobj.getString("Duration_Year")));                }else if ("search_course_college".equals(positionstr) || "course_college".equals(positionstr) || "search_college_main".equals(positionstr)){                     JSONObject newobj = mCareerData.getJSONObject(position);                    holder.collegeNameTxtView.setText(newobj.getString("Name"));                    holder.CollegeAddressTxtView.setText(getResources().getString(R.string.CollegeListAddress, newobj.getString("Address_Line_1"), newobj.getString("Address_line_2")));                    holder.CollegePinCodeTxtView.setText(newobj.getString("Pin_Code"));                    if (newobj.getString("WEBSITE").equals("")){                        holder.CollegeWebSiteTxtView.setText(getResources().getString(R.string.NotAvailable)) ;                    }                    else {                        holder.CollegeWebSiteTxtView.setText(newobj.getString("WEBSITE"))   ;                    }                    holder.CollegeAffilitaedTxtView.setText(newobj.getString("IS_ACCREDITED"));                }else if ("college_course".equals(positionstr)){                    holder.careerTitle.setText(mCareerData.get(position).toString());                }            } catch (JSONException e) {                e.printStackTrace();            }        }        public void setLoaded() {            loading = false;        }        // Return the size of your dataset (invoked by the layout manager)        @Override        public int getItemCount() {            return mCareerData.length();        }    }    public interface RecyclerViewClickListener    {        void recyclerViewListClicked(View v, int position);    }    public interface OnLoadMoreListener {        void onLoadMore();    }}